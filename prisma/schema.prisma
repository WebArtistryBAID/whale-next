generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String         @id
  name        String
  pinyin      String
  phone       String?
  permissions String[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  blocked     Boolean        @default(false)
  points      Decimal        @default(0)
  orders      Order[]
  logs        UserAuditLog[]
}

model Category {
  id    Int        @id @default(autoincrement())
  name  String
  items ItemType[]
}

model Tag {
  id    Int        @id @default(autoincrement())
  name  String
  color String
  items ItemType[]
}

model OptionType {
  id        Int          @id @default(autoincrement())
  name      String
  items     OptionItem[]
  itemTypes ItemType[]
}

model OptionItem {
  id           Int           @id @default(autoincrement())
  type         OptionType    @relation(fields: [typeId], references: [id])
  typeId       Int
  name         String
  default      Boolean       @default(false)
  priceChange  Decimal       @default(0)
  soldOut      Boolean       @default(false)
  orderedItems OrderedItem[]
}

model ItemType {
  id               Int           @id @default(autoincrement())
  category         Category      @relation(fields: [categoryId], references: [id])
  categoryId       Int
  name             String
  image            String?
  tags             Tag[]
  description      String
  shortDescription String
  options          OptionType[]
  basePrice        Decimal
  salePercent      Decimal
  soldOut          Boolean       @default(false)
  orderedItems     OrderedItem[]
}

model OrderedItem {
  id             Int          @id @default(autoincrement())
  order          Order        @relation(fields: [orderId], references: [id])
  orderId        Int
  itemType       ItemType     @relation(fields: [itemTypeId], references: [id])
  itemTypeId     Int
  appliedOptions OptionItem[]
  amount         Int
}

enum OrderStatus {
  waiting
  done
}

enum OrderType {
  pickUp
  delivery
}

model Order {
  id           Int           @id @default(autoincrement())
  items        OrderedItem[]
  totalPrice   Decimal
  number       String
  status       OrderStatus
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  type         OrderType
  deliveryRoom String?
  user         User?         @relation(fields: [userId], references: [id])
  userId       String
  onSiteName   String?
  paid         Boolean       @default(false)
}

model Ad {
  id    Int     @id @default(autoincrement())
  name  String
  image String?
  url   String
}

model SettingsItem {
  key   String @id
  value String
}

enum UserAuditLogType {
  login
  createOrder
  modifyOrder
  deleteOrder
}

model UserAuditLog {
  id     Int              @id @default(autoincrement())
  time   DateTime         @default(now())
  type   UserAuditLogType
  user   User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  values String[]
}
